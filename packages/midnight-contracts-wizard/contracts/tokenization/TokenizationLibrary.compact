module TokenizationLibrary {
    export {generateOwnersPK, Investor, generateCommit};
    import CompactStandardLibrary;
    
    struct Investor {
        id: Bytes<32>;
        investment: Uint<32>;
        coinType: Bytes<32>;
    };

    circuit generateOwnersPK(address: Bytes<32>, sk: Bytes<32>, rand: Bytes<32>): Bytes<32>{
        return persistentHash<Vector<2, Bytes<32>>>([
            pad(32, "tokenless:user"),
            persistentHash<Vector<3, Bytes<32>>>([
            address, sk, rand, 
            ])
        ]);
    }
    circuit generateCommit(data: Investor, rand: Bytes<32>): Bytes<32>{
        return persistentCommit<Investor>(data, rand);
    }

}